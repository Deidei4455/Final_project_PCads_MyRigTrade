# Generated by Django 4.2.19 on 2025-02-18 14:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CasePC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_name', models.CharField(help_text='PC case name', max_length=50, verbose_name='Case name')),
                ('case_size', models.CharField(choices=[('full', 'Full Tower'), ('mid', 'Mid Tower'), ('mini', 'Mini Tower'), ('micro-ATX', 'Micro-ATX Case'), ('mini-ITX', 'Mini-ITX Case')], default='mid', help_text='PC case size, full, mid, mini, micro-ATX, mini-ITX', max_length=30, verbose_name='Case size')),
            ],
            options={
                'verbose_name': 'PC case',
                'verbose_name_plural': 'PC cases',
            },
        ),
        migrations.CreateModel(
            name='Cpu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(help_text='CPU brand name', max_length=30, verbose_name='CPU brand')),
                ('cpu_model', models.CharField(max_length=30, verbose_name='CPU model')),
                ('cores', models.IntegerField(blank=True, help_text='Number of cpu cores', null=True, verbose_name='Number of cores')),
                ('base_clock_speed', models.FloatField(blank=True, help_text='Base clock speed of CPU, GHz', null=True, verbose_name='Base clock speed')),
                ('socket_type', models.CharField(help_text='CPU socket type, (AM4, LGA 1151, etc.)', max_length=30, verbose_name='CPU socket')),
            ],
        ),
        migrations.CreateModel(
            name='CpuCooler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooler_name', models.CharField(max_length=30, verbose_name='CPU cooler name')),
                ('cooler_type', models.CharField(choices=[('air', 'air cooling'), ('liquid', 'liquid cooling')], default='air', help_text='CPU cooling type, air or liquid', max_length=30, verbose_name='CPU cooler type')),
                ('max_power', models.IntegerField(help_text='Max CPU cooler power, W', verbose_name='Max power')),
                ('fan_size', models.IntegerField(help_text='CPU cooler fan size, mm', verbose_name='Fan size')),
            ],
            options={
                'verbose_name': 'CPU cooler',
                'verbose_name_plural': 'CPU coolers',
            },
        ),
        migrations.CreateModel(
            name='Gpu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(help_text='GPU brand name', max_length=30, verbose_name='GPU brand')),
                ('gpu_model', models.CharField(help_text='GPU model (like radeon 7900 xtx, rtx 3090, etc.', max_length=30, verbose_name='GPU model')),
                ('vram', models.IntegerField(verbose_name='Number of ram')),
                ('clock_speed', models.FloatField(blank=True, help_text='Clock speed of GPU, MHz', null=True, verbose_name='Base clock speed')),
            ],
        ),
        migrations.CreateModel(
            name='Motherboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motherboard_name', models.CharField(help_text='Motherboard name, Gigabyte AORUS, ASUS ROG, etc.', max_length=50, verbose_name='Motherboard name')),
                ('chipset', models.CharField(help_text='Chipset type, AMD X570, Intel Z790, etc.', max_length=30, verbose_name='Chipset type')),
                ('socket_type', models.CharField(help_text='CPU socket type, (AM4, LGA 1151, etc.)', max_length=30, verbose_name='Socket type')),
                ('board_size', models.CharField(choices=[('ATX', 'ATX'), ('micro ATX', 'Micro ATX'), ('mini ATX', 'Mini ATX'), ('mini ITX', 'Mini ITX'), ('E-ATX', 'E-ATX'), ('XL-ATX', 'XL-ATX'), ('BTX', 'BTX')], default='micro ATX', help_text='Motherboard size, ATX, micro/mini ATX, mini-ITX, E-ATX, XL-ATX, BTX', max_length=30, verbose_name='Mootherboard size')),
                ('max_ram', models.IntegerField(help_text='Max RAM capacity that motherboard can have', verbose_name='Max RAM')),
            ],
        ),
        migrations.CreateModel(
            name='PcBuild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='PC name')),
                ('cpu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcportal.cpu')),
                ('cpucooler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcportal.cpucooler')),
                ('gpu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcportal.gpu')),
                ('motherboard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcportal.motherboard')),
                ('pc_case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcportal.casepc')),
            ],
        ),
        migrations.CreateModel(
            name='Psu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('psu_name', models.CharField(max_length=50, verbose_name='PSU name')),
                ('wattage', models.IntegerField(verbose_name='PSU wattage power')),
                ('efficiency', models.CharField(choices=[('plus', '80 PLUS'), ('bronze', '80 PLUS Bronze'), ('silver', '80 PLUS Silver'), ('gold', '80 PLUS Gold'), ('plat', '80 PLUS Platinum'), ('titan', '80 PLUS Titanium')], default='bronze', help_text='PSU efficiency rating', max_length=30, verbose_name='PSU efficiency')),
            ],
        ),
        migrations.CreateModel(
            name='Ram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram_name', models.CharField(help_text='RAM name(like G.Skill Trident, Kingston Fury, etc.', max_length=50, verbose_name='RAM name/title')),
                ('capacity', models.IntegerField(help_text='RAM capacity in GB', verbose_name='RAM capacity')),
                ('ram_type', models.CharField(choices=[('ddr', 'DDR'), ('ddr2', 'DDR2'), ('ddr3', 'DDR3'), ('ddr4', 'DDR4'), ('ddr5', 'DDR5')], default='ddr4', max_length=30, verbose_name='RAM type')),
                ('ram_speed', models.IntegerField(help_text='RAM speed, MHz', verbose_name='RAM speed')),
            ],
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(max_length=30, verbose_name='First name')),
                ('l_name', models.CharField(max_length=30, verbose_name='Last name')),
                ('email', models.CharField(max_length=30, verbose_name='Email')),
                ('phone_num', models.IntegerField(verbose_name='Phone number')),
            ],
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_name', models.CharField(help_text='Storage device name, Samsung, Kingston, etc.', max_length=30, verbose_name='Storage device name')),
                ('storage_type', models.CharField(choices=[('HDD', 'HDD'), ('SSD', 'SSD'), ('SSHD', 'SSHD'), ('NVMe', 'NVMe'), ('M2', 'M.2 - form factor for SSDs')], default='HDD', max_length=30, verbose_name='Storage type')),
                ('capacity', models.IntegerField(help_text='Storage capacity in GB', verbose_name='Storage capacity')),
                ('write_speed', models.IntegerField(help_text='Write speed MB/s', verbose_name='Write speed')),
                ('read_speed', models.IntegerField(help_text='Read speed MB/s', verbose_name='Read speed')),
            ],
        ),
        migrations.CreateModel(
            name='StorageListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of Storage devices', verbose_name='Storage quantity')),
                ('price', models.FloatField(verbose_name='Storage price')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_listing', to='pcportal.seller')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.storage')),
            ],
        ),
        migrations.CreateModel(
            name='StorageBuild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of Storage devices', verbose_name='Storage quantity')),
                ('pcbuild', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage', to='pcportal.pcbuild')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.storage')),
            ],
        ),
        migrations.CreateModel(
            name='RamListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of RAMs', verbose_name='RAM quantity')),
                ('price', models.FloatField(verbose_name='RAM price')),
                ('ram', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.ram')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ram_listing', to='pcportal.seller')),
            ],
        ),
        migrations.CreateModel(
            name='RamBuild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of RAMs', verbose_name='RAM quantity')),
                ('pcbuild', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ram', to='pcportal.pcbuild')),
                ('ram', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.ram')),
            ],
        ),
        migrations.CreateModel(
            name='PsuListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of PSUs', verbose_name='PSU quantity')),
                ('price', models.FloatField(verbose_name='PSU price')),
                ('psu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.psu')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='psu_listing', to='pcportal.seller')),
            ],
        ),
        migrations.CreateModel(
            name='PcBuildListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(verbose_name='Price')),
                ('date_created', models.DateField(auto_now_add=True, verbose_name='Date listed')),
                ('condition', models.CharField(choices=[('full', 'Full build'), ('incomplete', 'Incomplete'), ('pre-owned', 'Pre-owned')], help_text='Is is a full build, incomplete or used', max_length=30, verbose_name='PC condition')),
                ('description', models.TextField(blank=True, help_text='PC build description, information', max_length=500, null=True, verbose_name='Description')),
                ('pc_build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.pcbuild')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.seller')),
            ],
        ),
        migrations.AddField(
            model_name='pcbuild',
            name='psu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcportal.psu'),
        ),
        migrations.CreateModel(
            name='MotherboardListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of Motherboards', verbose_name='Motherboard quantity')),
                ('price', models.FloatField(verbose_name='Motherboard price')),
                ('motherboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.motherboard')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='motherboard_listing', to='pcportal.seller')),
            ],
        ),
        migrations.CreateModel(
            name='GpuListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of GPUs', verbose_name='GPU quantity')),
                ('price', models.FloatField(verbose_name='GPU price')),
                ('gpu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.gpu')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gpu_listing', to='pcportal.seller')),
            ],
        ),
        migrations.CreateModel(
            name='CpuListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of CPUs', verbose_name='CPU quantity')),
                ('price', models.FloatField(verbose_name='CPU price')),
                ('cpu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.cpu')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cpu_listing', to='pcportal.seller')),
            ],
        ),
        migrations.CreateModel(
            name='CpuCoolerListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of CPU coolers', verbose_name='CPU cooler quantity')),
                ('price', models.FloatField(verbose_name='CPU cooler price')),
                ('cpucooler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.cpucooler')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cpucooler_listing', to='pcportal.seller')),
            ],
        ),
        migrations.CreateModel(
            name='CasePCListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of PC cases', verbose_name='PC case quantity')),
                ('price', models.FloatField(verbose_name='PC case price')),
                ('casepc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcportal.casepc')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='casepc_listing', to='pcportal.seller')),
            ],
        ),
    ]
